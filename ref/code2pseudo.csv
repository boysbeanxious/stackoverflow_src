,q_id,q_prep_text,code2pseudo
1,77593717,"['import hashlib', '', 'user_hash_dict = {}', '', ""with open('common_passwords.txt','r' ) as f:"", 'common_passwords = f.read().splitlines()', '', ""with open('user_hash.txt', 'r') as f:"", 'text = f.read().splitlines()', 'for user_hash in text:', 'username = user_hash.split(&quot;:&quot;)[0]', 'hash = user_hash.split(&quot;:&quot;)[1]', 'user_hash_dict[username] = hash', '', 'for password in common_passwords:', ""hashed_password = hashlib.sha256(password.encode('utf-8')).hexdigest()"", 'for username , hash in user_hash_dict.items():', 'if hashed_password == hash:', ""print(f'hash found\\n{username}:{password}')"", '']","import module hashlib.substitute the result for value under the 'use_ssl' key of the options dictionary. → → → → → → → → → → → → → → → → → →user_hash_dict is an empty dictionary.substitute the result for value under the 'use_ssl' key of the options dictionary. → → → → → → → → → → → → → → → → → →open 'common_passwords.txt' file in read mode, with file descriptor as f,call the method f.read, split the result into lines, substitute the result for common_passwords.substitute the result for value under the 'use_ssl' key of the options dictionary. → → → → → → → → → → → → → → → → → →open 'user_hash.txt' file in read mode, with file descriptor as f,call the method f.read, split the result in lines, substitute the result for text.for every user_hash in text,split user_hash by &quot;:&quot;, substitute the first element of the result for username.split user_hash by &quot;:&quot; and substitute the second element of the result for hash.substitute hash for value under the username key of the user_hash_dict dictionary.substitute the result for value under the 'use_ssl' key of the options dictionary. → → → → → → → → → → → → → → → → → →for every password in common_passwords,call the method password.encode with an argument string 'utf-8', use the result as an argument for the call to the hashlib.sha256 function,for every username and hash in user_hash_dict.items,if hashed_password equals hash,print a string 'hash found\n{username}:{password}'.substitute the result for value under the 'use_ssl' key of the options dictionary. → → → → → → → → → → → → → → → → → →"
2,77591118,"['London:Alpha', 'London', 'London:Beta', 'London:Delta', 'Paris', '']","and result of the function force_text called with an argument string 'Use Django 2.0 to force a single character.'.and result of the function force_text called with an argument v. call the function force_text with an argument v, substitute the result for London.substitute the result for London.and result of the function force_text called with an argument v. call the function force_text with an argument v. substitute the result for London.Delta.substitute the result for Paris.substitute the result for value under the 'use_ssl' key of the options dictionary. → → → → → → → → → → → → → → → → → →"
2,77591118,"['London_sub:Alpha', 'London_sub', 'London_sub:Beta', 'London_sub:Delta', 'Paris_sub', '']",and result of the function force_text called with an argument string 'Use Python 2 to get the mode from the settings.VERBOSE environment variable. London_sub is an instance of London.substitute the result for London_sub.substitute Beta for London_sub.substitute the result for London_sub.substitute the result for paris_sub.substitute the result for value under the 'use_ssl' key of the options dictionary. → → → → → → → → → → → → → → → → → →
